from qiskit import QuantumCircuit, assemble, Aer
from qiskit.visualization import plot_histogram

#here we are creating a circuit with 8 quibits and adding a pauli X to the 7th qubit and then measuring the output
qc_encode = QuantumCircuit(8)
qc_encode.x(7)
qc_encode.measure_all()
qc_encode.draw()

#this part is to draw the histogram
sim = Aer.get_backend('aer_simulator') 
result = sim.run(qc_encode).result()
counts = result.get_counts()
plot_histogram(counts)

#this is how we add a CNOT to the circuit which is identical to XOR in classical information theory
qc_cnot = QuantumCircuit(2)
qc_cnot.cx(0,1)
qc_cnot.draw()

# this is an example of the CNOT operator and the result will be 11
qc = QuantumCircuit(2,2)
qc.x(0)
qc.cx(0,1)
qc.measure(0,0)
qc.measure(1,1)
qc.draw()

#We dont want to affect our second qubit so we make the addition at the third qubit
qc_ha = QuantumCircuit(4,2)
# encode inputs in qubits 0 and 1
qc_ha.x(0) # For a=0, remove this line. For a=1, leave it.
qc_ha.x(1) # For b=0, remove this line. For b=1, leave it.
qc_ha.barrier()
# use cnots to write the XOR of the inputs on qubit 2
qc_ha.cx(0,2)
qc_ha.cx(1,2)
qc_ha.barrier()
# extract outputs
qc_ha.measure(2,0) # extract XOR value
qc_ha.measure(3,1)
qc_ha.draw()

#another way to plot the histogram
qobj = assemble(qc_ha)
counts = sim.run(qobj).result().get_counts()
plot_histogram(counts)
